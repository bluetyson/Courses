---
title: Monopoly and Markov Process
author: Dilawar Singh
header-includes:
    - \usepackage[margin=15mm]{geometry}
    - \usepackage{verbatim}
---

For the given assignment, following is the transition matrix.

\begin{tiny}
    \verbatiminput{./transition.out}
\end{tiny}

# 1. Stochastic matrix 

The column indexed 29 is __Go to jail__ whiel column indexed 10 is __jail__.
Since we never stay in column 29, column content is 0. We immediately moves to
column 10. The probability of getting into 29 is adding into the probability of
going to 10 from a position. This fact is captured by modified transition matrix
show below.

\begin{tiny}
    \verbatiminput{./markov.out}
\end{tiny}

It can be shown that sum of each row of this matrix is 1.0. This is a Stochastic
matrix.

# 2. Distribution after 50 steps

This is equivalent for raising the stochastic matrix to power 50. This is given
below.

\begin{tiny}
    \verbatiminput{./markov_50.out}
\end{tiny}


# 3. Eigen values and Eigen vector

These matrix are produced and analyzed in __Python__. The code is in appendix.
We found the following maximum eigenvalue and corrosponding eigen-vector of the
matrix.

    (1+0j)
    [-0.16012815+0.j -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j
     -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j
     -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j
     -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j
     -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j
     -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j
     -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j
     -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j
     -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j
     -0.16012815+0.j -0.16012815+0.j -0.16012815+0.j]

Now when we raised the power of matrix to 50, we found maximum eigenvalue and
corrosponding eigenvector "unchanged".
\footnote{ Diff between max eigenvalues: -4.4408920985e-16. \\
Diff between eigenvectors: (-4.4408920985e-16+0j) 
}

    (1+0j)
    [ 0.16012815+0.j  0.16012815+0.j  0.16012815+0.j  0.16012815+0.j
      0.16012815+0.j  0.16012815+0.j  0.16012815+0.j  0.16012815+0.j
      0.16012815+0.j  0.16012815+0.j  0.16012815+0.j  0.16012815+0.j
      0.16012815+0.j  0.16012815+0.j  0.16012815+0.j  0.16012815+0.j
      0.16012815+0.j  0.16012815+0.j  0.16012815+0.j  0.16012815+0.j
      0.16012815+0.j  0.16012815+0.j  0.16012815+0.j  0.16012815+0.j
      0.16012815+0.j  0.16012815+0.j  0.16012815+0.j  0.16012815+0.j
      0.16012815+0.j  0.16012815+0.j  0.16012815+0.j  0.16012815+0.j
      0.16012815+0.j  0.16012815+0.j  0.16012815+0.j  0.16012815+0.j
      0.16012815+0.j  0.16012815+0.j  0.16012815+0.j]

# The bonus thingy

Another python script (not in appendix but available
[here](http://github.com/dilawar/courses/raw/master/) is used to find which
positions are most likely after 1000 steps. Following is the matrix.

\begin{tiny}
    \verbatiminput{./markov_1000.out}
\end{tiny}

Following is the sorted index of the above matrix in ascending order.

\begin{tiny}
    \verbatiminput{./sorted.out}
\end{tiny}

Since index 10 is jail, we can ignore it. We should look at index 17, 18, 19,
16, 20, 26 etc. and check their values i.e. multiply their values with
probabilities of reaching there. If played long enough, the most overvalued
property is at index 4, and best value for money is at index 38 (followed by 32
and 27).

# Simulation

We did the simulation for a million steps and computed the distribution which is
plotted below 

![A million time of monopoly](./monopoly.png)

Although the indexing is somewhat confusing in simulation and Markovian
processing (dropping index 29) altogether. Surprisingly I am getting a peak at
index 21 which is 22 on the board. Markovian process is giving a peak at index
16 which is definitely somewhat spooky. May be random no generator mimicking
dice is not so great.

# Appendix

The following code both simulate the game and solves it using stochastic matrix.

\begin{scriptsize}
    \verbatiminput{./monopoly.py}
\end{scriptsize}

